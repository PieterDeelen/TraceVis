/*
 * MainFrame.java
 *
 * Author: Pieter Deelen
 * Created: June 13, 2005, 2:47 PM
 *
 */

package tracevis.control;

import java.awt.event.ActionEvent;
import java.io.File;
import java.util.LinkedList;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import tracevis.control.settings.LayoutSettingsDialog;
import tracevis.control.settings.RendererSettingsDialog;
import tracevis.control.settings.SettingsListener;
import tracevis.control.settings.TimeLineSettingsDialog;
import tracevis.model.Program;
import tracevis.model.ProgramOptions;
import tracevis.model.types.CallAssignment;
import tracevis.model.types.ClassData;
import tracevis.model.types.ProgramListener;
import tracevis.properties.ApplicationProperties;
import tracevis.visualization.ProgramView;
import tracevis.visualization.structure.CustomRenderer;
import tracevis.visualization.structure.CustomSpringLayout;
import tracevis.visualization.structure.StructuralView.Settings;
import tracevis.visualization.structure.VertexSizeSettings;
import tracevis.visualization.timeline.TimeLineSettings;


/**
 * The main window.
 * @author  Pieter Deelen
 */
public class MainFrame extends JFrame implements ProgramListener {
	private final Program program;
	private final ProgramView view;
	private ProgramOptions defaultOptions;

	private final LoadAction loadAction;
	private final GenerateAction generateAction;

	private final int classCount;
	private final int callCount;

	private final AboutDialog aboutDialog;

	/**
	 * Creates new form MainFrame.
	 */
	public MainFrame(Program program, ProgramView view) {
		super("TraceVis");

		// Initialize actions;
		loadAction = new LoadAction();
		loadAction.setEnabled(true);

		generateAction = new GenerateAction();
		generateAction.setEnabled(true);

		initComponents();

		this.program = program;
		program.addListener(this);

		this.view = view;
		add(view);
		pack();


		aboutDialog = new AboutDialog(this, true);

		List<String> classPath = new LinkedList<String>();

		List<String> exclusionPatterns = new LinkedList<String>();
		exclusionPatterns.add("java.*");
		exclusionPatterns.add("javax.*");
		exclusionPatterns.add("sun.*");
		exclusionPatterns.add("com.sun.*");

		List<String> inclusionPatterns = new LinkedList<String>();

		defaultOptions = new ProgramOptions("","","","", classPath,
		                                    exclusionPatterns,
			                                inclusionPatterns, false);

		classCount = 0;
		callCount = 0;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        traceChooser = new javax.swing.JFileChooser();
        traceOptions = new javax.swing.JPanel();
        hideInnerClassesCheck = new javax.swing.JCheckBox();
        callAssignmentLabel = new javax.swing.JLabel();
        definingClassButton = new javax.swing.JRadioButton();
        objectClassButton = new javax.swing.JRadioButton();
        colorMapChooser = new javax.swing.JFileChooser();
        callAssignmentGroup = new javax.swing.ButtonGroup();
        statusBar = new javax.swing.JPanel();
        programStatus = new javax.swing.JLabel();
        filler = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        traceMenu = new javax.swing.JMenu();
        traceLoadMenuItem = new javax.swing.JMenuItem();
        traceGenerateMenuItem = new javax.swing.JMenuItem();
        traceSeparator0 = new javax.swing.JSeparator();
        traceShowConstructorsMenuItem = new javax.swing.JMenuItem();
        traceNoShowConstructors = new javax.swing.JMenuItem();
        traceUnfilterMenuItem = new javax.swing.JMenuItem();
        traceSeparator1 = new javax.swing.JSeparator();
        traceExitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        viewLayoutSettingsMenu = new javax.swing.JMenuItem();
        viewRendererSettingsMenu = new javax.swing.JMenuItem();
        viewTimeLineSettingsMenu = new javax.swing.JMenuItem();
        viewSeparator1 = new javax.swing.JSeparator();
        viewLoadColorMapMenu = new javax.swing.JMenuItem();
        viewSaveColorMapMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        traceChooser.setAccessory(traceOptions);
        ApplicationProperties applicationProperties = ApplicationProperties.getInstance();
        File tracesDir = new File(applicationProperties.getTracesDirectory());
        traceChooser.setCurrentDirectory(tracesDir);
        traceChooser.setFileFilter(new TraceFilter());
        traceOptions.setLayout(new java.awt.GridBagLayout());

        traceOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));
        hideInnerClassesCheck.setSelected(true);
        hideInnerClassesCheck.setText("Hide Inner Classes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 5);
        traceOptions.add(hideInnerClassesCheck, gridBagConstraints);

        callAssignmentLabel.setText("Call Assignment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        traceOptions.add(callAssignmentLabel, gridBagConstraints);

        callAssignmentGroup.add(definingClassButton);
        definingClassButton.setSelected(true);
        definingClassButton.setText("Defining Class");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        traceOptions.add(definingClassButton, gridBagConstraints);

        callAssignmentGroup.add(objectClassButton);
        objectClassButton.setText("Object Class");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        traceOptions.add(objectClassButton, gridBagConstraints);

        colorMapChooser.setFileFilter(new ColorMapFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        statusBar.setLayout(new java.awt.GridBagLayout());

        programStatus.setText(" ");
        programStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusBar.add(programStatus, new java.awt.GridBagConstraints());

        filler.setText(" ");
        filler.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        statusBar.add(filler, gridBagConstraints);

        getContentPane().add(statusBar, java.awt.BorderLayout.SOUTH);

        controlPanel.setLayout(new java.awt.GridBagLayout());

        getContentPane().add(controlPanel, java.awt.BorderLayout.NORTH);

        traceMenu.setMnemonic('T');
        traceMenu.setText("Trace");
        traceLoadMenuItem.setAction(loadAction);
        traceMenu.add(traceLoadMenuItem);

        traceGenerateMenuItem.setAction(generateAction);
        traceMenu.add(traceGenerateMenuItem);

        traceMenu.add(traceSeparator0);

        traceShowConstructorsMenuItem.setText("Only Show Constructors");
        traceShowConstructorsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceShowConstructorsMenuItemActionPerformed(evt);
            }
        });

        traceMenu.add(traceShowConstructorsMenuItem);

        traceNoShowConstructors.setText("Don't Show Constructors");
        traceNoShowConstructors.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceNoShowConstructorsActionPerformed(evt);
            }
        });

        traceMenu.add(traceNoShowConstructors);

        traceUnfilterMenuItem.setText("Reset Filter");
        traceUnfilterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceUnfilterMenuItemActionPerformed(evt);
            }
        });

        traceMenu.add(traceUnfilterMenuItem);

        traceMenu.add(traceSeparator1);

        traceExitMenuItem.setMnemonic('X');
        traceExitMenuItem.setText("Exit");
        traceExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceExitMenuItemActionPerformed(evt);
            }
        });

        traceMenu.add(traceExitMenuItem);

        menuBar.add(traceMenu);

        viewMenu.setMnemonic('V');
        viewMenu.setText("View");
        viewLayoutSettingsMenu.setMnemonic('L');
        viewLayoutSettingsMenu.setText("Configure Layout...");
        viewLayoutSettingsMenu.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLayoutSettingsMenuActionPerformed(evt);
            }
        });

        viewMenu.add(viewLayoutSettingsMenu);

        viewRendererSettingsMenu.setMnemonic('R');
        viewRendererSettingsMenu.setText("Configure Renderer...");
        viewRendererSettingsMenu.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRendererSettingsMenuActionPerformed(evt);
            }
        });

        viewMenu.add(viewRendererSettingsMenu);

        viewTimeLineSettingsMenu.setMnemonic('T');
        viewTimeLineSettingsMenu.setText("Configure Time Line...");
        viewTimeLineSettingsMenu.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTimeLineSettingsMenuActionPerformed(evt);
            }
        });

        viewMenu.add(viewTimeLineSettingsMenu);

        viewMenu.add(viewSeparator1);

        viewLoadColorMapMenu.setMnemonic('l');
        viewLoadColorMapMenu.setText("Load Color Map...");
        viewLoadColorMapMenu.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLoadColorMapMenuActionPerformed(evt);
            }
        });

        viewMenu.add(viewLoadColorMapMenu);

        viewSaveColorMapMenu.setMnemonic('s');
        viewSaveColorMapMenu.setText("Save Color Map...");
        viewSaveColorMapMenu.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSaveColorMapMenuActionPerformed(evt);
            }
        });

        viewMenu.add(viewSaveColorMapMenu);

        menuBar.add(viewMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");
        aboutMenuItem.setMnemonic('A');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void traceNoShowConstructorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceNoShowConstructorsActionPerformed
		program.noInitFilter();
	}//GEN-LAST:event_traceNoShowConstructorsActionPerformed

	private void traceShowConstructorsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceShowConstructorsMenuItemActionPerformed
		program.initFilter();
	}//GEN-LAST:event_traceShowConstructorsMenuItemActionPerformed

	private void traceUnfilterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceUnfilterMenuItemActionPerformed
		program.unfilter();
	}//GEN-LAST:event_traceUnfilterMenuItemActionPerformed

	private void viewSaveColorMapMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSaveColorMapMenuActionPerformed
		int returnVal = colorMapChooser.showSaveDialog(MainFrame.this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			try {
				File file = colorMapChooser.getSelectedFile();
				view.saveColorMap(file);
			} catch (Exception e) {
				String message = "Could not save color map: " + e.getMessage();
				JOptionPane.showMessageDialog(MainFrame.this, message,
					"Error", JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_viewSaveColorMapMenuActionPerformed

	private void viewLoadColorMapMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLoadColorMapMenuActionPerformed
		int returnVal = colorMapChooser.showOpenDialog(MainFrame.this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			try {
				File file = colorMapChooser.getSelectedFile();
				view.loadColorMap(file);
			} catch (Exception e) {
				String message = "Could not load color map: " + e.getMessage();
				JOptionPane.showMessageDialog(MainFrame.this, message,
					"Error", JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_viewLoadColorMapMenuActionPerformed

	private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
		aboutDialog.setVisible(true);
	}//GEN-LAST:event_aboutMenuItemActionPerformed

	private void viewTimeLineSettingsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTimeLineSettingsMenuActionPerformed
		// Show time line settings dialog.
		TimeLineSettingsDialog settingsDialog =
			new TimeLineSettingsDialog(view.getTimeLineSettings());
		settingsDialog.addListener(new TimeLineSettingsListener());

		settingsDialog.setVisible(true);
	}//GEN-LAST:event_viewTimeLineSettingsMenuActionPerformed

	private void viewRendererSettingsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRendererSettingsMenuActionPerformed
		// Show settings dialog.
		RendererSettingsDialog settingsDialog =
			new RendererSettingsDialog(view.getRendererSettings(), view.getStructuralViewSettings());
		settingsDialog.addListener(new RendererSettingsListener());

		settingsDialog.setVisible(true);
	}//GEN-LAST:event_viewRendererSettingsMenuActionPerformed

	private void viewLayoutSettingsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLayoutSettingsMenuActionPerformed
		VertexSizeSettings vertexSizeSettings = view.getVertexSizeSettings();
		CustomSpringLayout.Settings layoutSettings = view.getLayoutSettings();

		// Show settings dialog.
		LayoutSettingsDialog settingsDialog =
			new LayoutSettingsDialog(layoutSettings, vertexSizeSettings);
		settingsDialog.addListener(new LayoutSettingsListener());

		settingsDialog.setVisible(true);
	}//GEN-LAST:event_viewLayoutSettingsMenuActionPerformed

	private class LayoutSettingsListener implements SettingsListener {
		@Override
		public void settingsChanged(Object source) {
			LayoutSettingsDialog settingsDialog = (LayoutSettingsDialog)source;

			VertexSizeSettings vertexSizeSettings = settingsDialog.getVertexSizeSettings();
			view.setVertexSizeSettings(vertexSizeSettings);

			CustomSpringLayout.Settings layoutSettings = settingsDialog.getLayoutSettings();
			view.setLayoutSettings(layoutSettings);

			view.recomputeLayout();

			view.repaint();
		}
	}

	private class RendererSettingsListener implements SettingsListener {
		@Override
		public void settingsChanged(Object source) {
			RendererSettingsDialog settingsDialog = (RendererSettingsDialog)source;

			CustomRenderer.Settings rendererSettings = settingsDialog.getRendererSettings();
			view.setRendererSettings(rendererSettings);

			Settings settings = settingsDialog.getViewSettings();
			view.setStructuralViewSettings(settings);

			view.repaint();
		}
	}

	private class TimeLineSettingsListener implements SettingsListener {
		@Override
		public void settingsChanged(Object source) {
			TimeLineSettingsDialog settingsDialog = (TimeLineSettingsDialog)source;

			TimeLineSettings timeLineSettings = settingsDialog.getTimeLineSettings();
			view.setTimeLineSettings(timeLineSettings);

			view.repaint();
		}
	}

	private void traceExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceExitMenuItemActionPerformed
		System.exit(0);
	}//GEN-LAST:event_traceExitMenuItemActionPerformed

	private class GenerateAction extends AbstractAction {
		public GenerateAction() {
			super();
			putValue(NAME, "Generate...");
			putValue(SHORT_DESCRIPTION, "Generate a trace.");
			putValue(MNEMONIC_KEY, new Integer('G'));
		}

		@Override
		public void actionPerformed(ActionEvent event) {
			defaultOptions = TraceGeneratorDialog.showDialog(defaultOptions);
		}
	}

	private class LoadAction extends AbstractAction {
		public LoadAction() {
			super();
			putValue(NAME, "Load...");
			putValue(SHORT_DESCRIPTION, "Load a trace.");
			putValue(MNEMONIC_KEY, new Integer('L'));
		}

		@Override
		public void actionPerformed(ActionEvent event) {
			int returnVal = traceChooser.showOpenDialog(MainFrame.this);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				try {
					File file = traceChooser.getSelectedFile();
					boolean hideInnerClasses = hideInnerClassesCheck.isSelected();
					CallAssignment assignment;
					if (definingClassButton.isSelected()) {
						assignment = CallAssignment.DEFINING_CLASS;
					} else {
						assignment = CallAssignment.OBJECT_CLASS;
					}

					program.loadTrace(file.getAbsolutePath(), hideInnerClasses, assignment);
				} catch (Exception e) {
					String message = "Could not load trace: " + e.getMessage();
					JOptionPane.showMessageDialog(MainFrame.this, message,
						                          "Error", JOptionPane.ERROR_MESSAGE);
				}
			}
		}
	}

	@Override
	public void traceLoaded() {
		programStatus.setText("Trace Loaded");
	}

	@Override
	public void traceFiltered() {}

	@Override
	public void timeChanged() {}

	@Override
	public void methodEntered(ClassData caller, ClassData callee) {}

	@Override
	public void methodExited(ClassData caller, ClassData callee) {}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.ButtonGroup callAssignmentGroup;
    private javax.swing.JLabel callAssignmentLabel;
    private javax.swing.JFileChooser colorMapChooser;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JRadioButton definingClassButton;
    private javax.swing.JLabel filler;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JCheckBox hideInnerClassesCheck;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton objectClassButton;
    private javax.swing.JLabel programStatus;
    private javax.swing.JPanel statusBar;
    private javax.swing.JFileChooser traceChooser;
    private javax.swing.JMenuItem traceExitMenuItem;
    private javax.swing.JMenuItem traceGenerateMenuItem;
    private javax.swing.JMenuItem traceLoadMenuItem;
    private javax.swing.JMenu traceMenu;
    private javax.swing.JMenuItem traceNoShowConstructors;
    private javax.swing.JPanel traceOptions;
    private javax.swing.JSeparator traceSeparator0;
    private javax.swing.JSeparator traceSeparator1;
    private javax.swing.JMenuItem traceShowConstructorsMenuItem;
    private javax.swing.JMenuItem traceUnfilterMenuItem;
    private javax.swing.JMenuItem viewLayoutSettingsMenu;
    private javax.swing.JMenuItem viewLoadColorMapMenu;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JMenuItem viewRendererSettingsMenu;
    private javax.swing.JMenuItem viewSaveColorMapMenu;
    private javax.swing.JSeparator viewSeparator1;
    private javax.swing.JMenuItem viewTimeLineSettingsMenu;
    // End of variables declaration//GEN-END:variables

}
