/*
 * InformationPanel.java
 *
 * Author: Pieter Deelen
 * Created: July 12, 2005, 1:51 PM
 *
 */

package tracevis.visualization.detail;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.swing.JPanel;

import tracevis.model.Program;
import tracevis.model.types.ClassData;
import tracevis.model.types.ProgramListener;
import tracevis.visualization.utilities.BrushMultiPickedState;
import tracevis.visualization.utilities.ColorModel;
import edu.uci.ics.jung.graph.ArchetypeEdge;
import edu.uci.ics.jung.graph.ArchetypeVertex;
import edu.uci.ics.jung.graph.DirectedEdge;
import edu.uci.ics.jung.graph.Edge;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.Vertex;
import edu.uci.ics.jung.visualization.PickEventListener;

/**
 * An information panel which displays information about the selected edges or
 * vertices.
 * @author  Pieter Deelen
 */
public class InformationPanel extends JPanel {
	private final Program program;

	private final BrushMultiPickedState pickedState;
	private final ColorModel colorModel;

	private final Map<Vertex, VertexPanel> vertexPanels;
	private final Map<Edge, EdgePanel> edgePanels;

	/**
	 * Creates new form InformationPanel.
	 */
	public InformationPanel(Program program, ColorModel colorModel, BrushMultiPickedState pickedState) {
		initComponents();

		this.program = program;
		program.addListener(new ProgramListenerImpl());

		this.colorModel = colorModel;

		vertexPanels = new HashMap<Vertex, VertexPanel>();
		edgePanels = new HashMap<Edge, EdgePanel>();

		this.pickedState = pickedState;
		pickedState.addListener(new PickEventListenerImpl());
	}

	private void update() {
		containerPanel.removeAll();

		for (Vertex v : (Set<Vertex>)pickedState.getPickedVertices()) {
			containerPanel.add(vertexPanels.get(v));
		}

		for (DirectedEdge e : (Set<DirectedEdge>)pickedState.getPickedEdges()) {
			containerPanel.add(edgePanels.get(e));
		}

		revalidate();
		repaint();
	}

	private class ProgramListenerImpl implements ProgramListener {
		@Override
		public void traceLoaded() {
			Graph callGraph = program.getCallGraph();

			for (Vertex v : (Set<Vertex>)callGraph.getVertices()) {
				VertexPanel vertexPanel = new VertexPanel(program, colorModel, v);
				vertexPanels.put(v, vertexPanel);
			}

			for (DirectedEdge e : (Set<DirectedEdge>)callGraph.getEdges()) {
				EdgePanel edgePanel = new EdgePanel(program, e);
				edgePanels.put(e, edgePanel);
			}

			update();
		}

		@Override
		public void traceFiltered() {
			for (VertexPanel vertexPanel : vertexPanels.values()) {
				vertexPanel.update();
			}

			for (EdgePanel edgePanel : edgePanels.values()) {
				edgePanel.update();
			}

			repaint();
		}

		@Override
		public void timeChanged() {
			for (VertexPanel vertexPanel : vertexPanels.values()) {
				vertexPanel.update();
			}

			for (EdgePanel edgePanel : edgePanels.values()) {
				edgePanel.update();
			}

			repaint();
		}

		@Override
		public void methodEntered(ClassData caller, ClassData callee) {}
		@Override
		public void methodExited(ClassData caller, ClassData callee) {}
	}

	private class PickEventListenerImpl implements PickEventListener {
		@Override
		public void vertexPicked(ArchetypeVertex v) {
			update();
		}

		@Override
		public void vertexUnpicked(ArchetypeVertex v) {
			update();
		}

		@Override
		public void edgePicked(ArchetypeEdge e) {
			update();
		}

		@Override
		public void edgeUnpicked(ArchetypeEdge e) {
			update();
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        scrollPane = new javax.swing.JScrollPane();
        containerPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        containerPanel.setLayout(new javax.swing.BoxLayout(containerPanel, javax.swing.BoxLayout.Y_AXIS));

        scrollPane.setViewportView(containerPanel);

        add(scrollPane, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel containerPanel;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

}
